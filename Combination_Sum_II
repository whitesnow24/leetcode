Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

这道题与Combination Sum有异曲同工之处，不同就在于数组里面的元素只能用一次，最后要注意去除重复的结果，代码如下：

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> ans;
        vector<vector<int>> res;
        sort(candidates.begin(), candidates.end());
        combinationSum2DFS(candidates, 0, ans , res, target);
        sort(res.begin(), res.end());
        res.erase(unique(res.begin(), res.end()), res.end());  ／／去重
        return res;
    }
    void combinationSum2DFS(vector<int> &candidates, int start, vector<int>& ans, vector<vector<int>>& res, int target) {
        if(0 == target) {
            res.push_back(ans);
            return;
        }
        if(0 > target) {
            return;
        }
        
        for(int i = start; i < candidates.size(); i++) {
            ans.push_back(candidates[i]);
            combinationSum2DFS(candidates, i + 1, ans, res, target - candidates[i]);
            ans.pop_back();
        }
    }
};