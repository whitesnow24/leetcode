Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

这道题有两种解法，一种是暴力解决，也就是直接for循环遍历整个数组，找到等于target的值的下标并返回class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(0 == nums.size()) {
            return -1;
        }
        for(int i = 0; i < nums.size(); i++) {
            if(target == nums[i]) {
                return i;
            }
        }
        return -1;
    }
};
第二种方法是类似于二分法来求解，但是不同的是数组为两个递增数组的组合，所以要注意判断nums[mid]与nums[left]与 nums[right]

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        if(0 == nums.size()) {
            return -1;
        }
        while(left <= right) {
            int mid = left + (right - left)/2;
            if(target == nums[mid]) {
                return mid;
            }
            else if(nums[left] <= nums[mid]) {  ／／注意此处为 <=
                if(nums[left] <= target && nums[mid] > target) {
                    right = mid - 1;
                }
                else {
                    left = mid + 1;
                }
            }
            else {
                if(nums[mid] < target && nums[right] >= target) {
                    left = mid + 1;
                }
                else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
};