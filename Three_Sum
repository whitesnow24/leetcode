Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]


这个题可以结合2Sum来进行解答，三个数相加的和为0，先将容器中的数据进行排序，固定一个数i从第一个开始循环，同时声明left和right，分别从i+1和最后一个开始移动，这里比较容易想到，但是注意的是不要有相同的答案，具体的代码如下：
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int i = 0;
        vector<int> tmp = nums;
        vector<vector<int>> res;
        if(nums.size() < 3) {
            return res;
        }
        sort(tmp.begin(), tmp.end());
        for(i = 0; i < nums.size() - 2; i++) {
            int left = i + 1;
            int right = nums.size() - 1;
            while(left < right) {
                int sum = tmp[i] + tmp[left] + tmp[right];
                if(0 == sum) {
                    res.push_back({tmp[i], tmp[left], tmp[right]});
                    left++;
                    right--;
                    while(left < right && tmp[left - 1] == tmp[left]) {          ／／这里是为了避免出现重复的答案
                        left++;
                    }
                    while(left < right && tmp[right + 1] == tmp[right]) {        ／／这里是为了避免出现重复的答案
                        right--;
                    }
                }
                else if(0 < sum) {
                    right --;
                }
                else {
                    left ++;
                }
            }
            while(i < (tmp.size() - 3) && tmp[i] == tmp[i+1]) {                 ／／这里是为了避免出现重复的答案
                i++;
            }
        }
        return res;
    }
};