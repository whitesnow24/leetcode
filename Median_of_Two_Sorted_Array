There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
思路：因为两个数组都是排好序的，所以只要找到第mid小的数就可以了，这里要注意的是结果为double，所以要强制类型转换，但是注意要在int做除法之前转换，不然不成功，具体代码如下：
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double ans = 0.0;
        int len1 = nums1.size();
        int len2 = nums2.size();
        int len = len1 + len2;
        if(0 == len) {
            return ans;
        }
        if(0 != len % 2) {
            ans = (double)findKth(nums1, nums2, len/2);
        }
        else {
            double ans1 = (double)findKth(nums1, nums2, len/2);
            double ans2 = (double)findKth(nums1, nums2, len/2 - 1);
            ans = (ans1 + ans2) / 2;
        }
        return ans;
    }
    
    int findKth(vector<int> &nums1, vector<int> &nums2, int n) {
        int len1 = nums1.size();
        int len2 = nums2.size();
        int j = 0, k = 0;
        for(int i = 0; i < n; i++) {
            if(j < len1 && k < len2) {
                if(nums1[j] < nums2[k]) {
                    j++;
                }
                else {
                    k++;
                }
            }
            else if(j < len1) {
                j++;
            }
            else {
                k++;
            }
        }
        if(j < len1 && k < len2) {
            return nums1[j] < nums2[k] ? nums1[j] : nums2[k];
        }
        if(j < len1) {
            return nums1[j];
        }
        else {
            return nums2[k];
        }
    }
};