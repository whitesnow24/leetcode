Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

这道题思路上没有很清晰，最终在网上搜到了答案，感觉还是应该想清楚，这样会有更加简单方便的方法，具体思路与代码如下：

思路：我们还是使用两个指针a和b, 每一次循环，我们更新左边最大的高度从A[0,1,...a]，和右侧最大的高度从A[b, b+1, ...n-1]，如果（leftmax < rightmax），那么至少leftmax - A[a]的水量可以被存进总量，而不用考虑【a,b】之间的情况，因为我们知道在右侧有一个更高的屏障（rightmax > leftmax）。同时，我们也知道，只能在a处只能存储最多leftmax - A[a]的水量，因为leftmax是左边最大的高度。所以，我们得到这样的结论，在坐标a处，我们恰能存储的水量就是leftmax - A[a]. 我们可以用同样的逻辑应用到当leftmax > rightmax。每一次循环，我们都对应的移动a或者b. 最后两者相遇时，循环结束。优化的算法，我们只需要一次扫描即可。

class Solution {
public:
    int trap(vector<int>& height) {
        int left = 0; 
        int right = height.size() - 1;
        int leftmax = 0;
        int rightmax = 0;
        int ans = 0;
        while(left < right) {
            leftmax = max(leftmax, height[left]);
            rightmax = max(rightmax, height[right]);
            if(leftmax < rightmax) {
                ans += leftmax - height[left];
                left++;
            }
            else {
                ans += rightmax - height[right];
                right--;
            }
        }
        return ans;
    }
};